---
- hosts: all
  become: true
  remote_user: root
  gather_facts: yes

  vars_files:
    - secrets.yml

  vars:
    - influx_cli_auth_params: '-username {{ chacal.influxdb.admin_user.username }} -password {{ chacal.influxdb.admin_user.password }}'

  pre_tasks:
    - name: 'Install python2'
      raw: apt-get -y install python-simplejson

  roles:

  tasks:

  #
  #  Install required packages
  #
    - name: Install HTTPS support for Apt
      apt: pkg=apt-transport-https state=latest update_cache=yes

    - name: Add Package Cloud Apt key
      apt_key: url="https://packagecloud.io/gpg.key" state=present

    - name: Add Grafana repo
      apt_repository:
        repo: deb https://packagecloud.io/grafana/stable/debian/ stretch main
        state: present

    - name: Add PostgreSQL repository Apt key
      apt_key: url="https://www.postgresql.org/media/keys/ACCC4CF8.asc" state=present

    - name: Add PostgreSQL repo
      apt_repository:
        repo: deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main
        state: present

    - name: Add InfluxDB repository Apt key
      apt_key: url="https://repos.influxdata.com/influxdb.key" state=present

    - name: Add InfluxDB repo
      apt_repository:
        repo: deb https://repos.influxdata.com/debian stretch stable
        state: present

    - name: Add Debian backports repo
      apt_repository:
        repo: deb http://deb.debian.org/debian stretch-backports main contrib non-free state=present update_cache=yes

    - name: Install/update dependencies
      apt:
        state: latest
        update_cache: yes
        pkg:
          - nginx
          - grafana
          - python-boto
          - ufw
          - sshguard
          - libgrib-api-tools
          - git
          - postgresql-9.6-postgis-2.3
          - influxdb
          - certbot
          - sudo
          - dma
          - mutt
          - iftop
          - psmisc

    - name: Install/update dependencies from backports
      apt:
        state: latest
        update_cache: yes
        default_release: "{{ansible_distribution_release}}-backports"
        pkg:
          - duply
          - duplicity
          - prometheus-node-exporter

    - name: Enable automatic upgrades
      include_role:
        name: unattended_upgrades
      vars:
        unattended_upgrades_email: "{{ chacal.netserver.unattended_upgrades.email }}"
        unattended_upgrades_origins: '"n=${distro_codename}"; "n=stretch-pgdg"; "n=stretch-updates";'

    #
    #  Run 'certbot certonly --standalone -d grafana.netserver.chacal.fi -d mqtt.netserver.chacal.fi -d tuuleeko.fi -d influxdb.netserver.chacal.fi -d www.tuuleeko.fi' to get certificates
    #  Also run 'openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048' to create strong Diffie-Hellman group
    #


  #
  #  Configure Nginx
  #
    - name: Remove default Nginx site
      file: path=/etc/nginx/sites-enabled/default state=absent
      register: nginx_default_site

    - name: Add custom Nginx SSL snippet
      copy: src=./conf/netserver_nginx_ssl_snippet.conf dest=/etc/nginx/snippets/ssl-netserver.conf
      register: nginx_custom_ssl_conf

    - name: Add custom Nginx configuration
      copy: src=./conf/netserver_nginx.conf dest=/etc/nginx/conf.d/netserver_nginx.conf
      register: nginx_custom_site

    - name: Enable & start Nginx
      systemd: name=nginx state=restarted enabled=yes daemon_reload=yes
      when: nginx_default_site.changed or nginx_custom_ssl_conf.changed or nginx_custom_site.changed

    - name: Reload Nginx periodically to get new SSL certs in use (certbot might have updated them)
      cron: name="Reload nginx" minute="0" hour="2" job="systemctl reload nginx"


  #
  #  Install & configure InfluxDB
  #
    - name: Configure InfluxDB HTTP service to listen only on localhost
      lineinfile:
        dest: /etc/influxdb/influxdb.conf
        state: present
        regexp: '^  bind-address = '
        insertafter: '^  # bind-address = ":8086"'
        line: '  bind-address = "localhost:8086"'
      register: influxdb_http_conf

    - name: Configure InfluxDB backup service to listen only on localhost
      lineinfile:
        dest: /etc/influxdb/influxdb.conf
        state: present
        regexp: '^bind-address = '
        insertafter: '^# bind-address = "127.0.0.1:8088"'
        line: 'bind-address = "localhost:8088"'
      register: influxdb_backup_conf

    - name: Configure InfluxDB to use authentication
      lineinfile:
        dest: /etc/influxdb/influxdb.conf
        state: present
        regexp: '^  auth-enabled = '
        insertafter: '^  # auth-enabled = false'
        line: '  auth-enabled = true'
      register: influxdb_auth_conf

    - name: Configure InfluxDB to not log HTTP requests
      lineinfile:
        dest: /etc/influxdb/influxdb.conf
        state: present
        regexp: '^  log-enabled = '
        insertafter: '^\[http\]'
        line: '  log-enabled = false'
      register: influxdb_http_log_conf

    - name: Configure InfluxDB log level to warn
      lineinfile:
        dest: /etc/influxdb/influxdb.conf
        state: present
        regexp: '^  level = '
        insertafter: '^  # level = "info"'
        line: '  level = "warn"'
      register: influxdb_http_log_conf

    - name: Enable & start InfluxDB
      systemd: name=influxdb state=restarted enabled=yes daemon_reload=yes
      when: influxdb_http_conf.changed or influxdb_backup_conf.changed or influxdb_auth_conf.changed or influxdb_http_log_conf.changed

    - name: Check if InfluxDB admin user has been created
      command: influx -execute "SHOW USERS" -username {{ chacal.influxdb.admin_user.username }} -password {{ chacal.influxdb.admin_user.password }}
      register: influx_admin_check
      ignore_errors: yes
      changed_when: "influx_admin_check.rc > 0"

    - name: Create InfluxDB admin user
      command: influx -execute "CREATE USER {{ chacal.influxdb.admin_user.username }} WITH PASSWORD '{{ chacal.influxdb.admin_user.password }}' WITH ALL PRIVILEGES"
      when: influx_admin_check.changed

    - name: Check if sensors database has been created
      command: influx -execute "SHOW DATABASES" {{ influx_cli_auth_params }}
      register: influx_db_check
      changed_when: "'sensors' not in influx_db_check.stdout"

    - name: Create InfluxDB database
      command: influx -execute "CREATE DATABASE sensors" {{ influx_cli_auth_params }}
      when: influx_db_check.changed

    - name: Check if InfluxDB regular user has been created
      command: influx -execute "SHOW USERS" {{ influx_cli_auth_params }}
      register: influx_user_check
      changed_when: "chacal.influxdb.regular_user.username not in influx_user_check.stdout"

    - name: Create InfluxDB regular user
      command: influx -execute "CREATE USER {{ chacal.influxdb.regular_user.username }} WITH PASSWORD '{{ chacal.influxdb.regular_user.password }}'" {{ influx_cli_auth_params }}
      when: influx_user_check.changed

    - name: Grant DB access to regular user
      command: influx -execute "GRANT ALL ON sensors TO {{ chacal.influxdb.regular_user.username }}" {{ influx_cli_auth_params }}
      when: influx_user_check.changed


  #
  #  Configure Grafana
  #
    - name: Set Grafana root URL
      lineinfile: dest=/etc/grafana/grafana.ini regexp='^root_url = ' insertafter='^;root_url = ' line='root_url = https://grafana.netserver.chacal.fi' state=present
      register: grafana_root_url

    - name: Set Grafana bind address
      lineinfile: dest=/etc/grafana/grafana.ini regexp='^http_addr =' insertafter='^;http_addr =' line='http_addr = localhost' state=present
      register: grafana_bind_address

    - name: Disable Grafana signups
      lineinfile: dest=/etc/grafana/grafana.ini regexp='^allow_sign_up = ' insertafter='^\[users\]' line='allow_sign_up = false' state=present
      register: grafana_allow_signup

    - name: Enable & start Grafana
      systemd: name=grafana-server state=restarted enabled=yes daemon_reload=yes
      when: grafana_root_url.changed or grafana_bind_address.changed or grafana_allow_signup.changed


  #
  #  Configure duply backups
  #
    - name: Create conf dir for duply backups
      file: path=/root/.duply/netserver state=directory

    - name: Setup duply backup configuration
      template: src=./conf/netserver_duply_conf.j2 dest=/root/.duply/netserver/conf

    - name: Setup duply backup excludes
      copy: src=./conf/netserver_duply_exclude dest=/root/.duply/netserver/exclude

    - name: Setup Dupply S3 credentials
      copy:
        dest: /root/.duply/netserver/aws_credentials
        mode: 0600
        content: |
          export AWS_ACCESS_KEY_ID='{{ chacal.aws.netserver_backup.access_key }}'
          export AWS_SECRET_ACCESS_KEY='{{ chacal.aws.netserver_backup.secret_key }}'

    - name: Backup periodically
      cron:
        name: "Duply backup"
        minute: "0"
        hour: "*/12"
        job: ". /root/.duply/netserver/aws_credentials; duply netserver backup 2>&1 | /usr/bin/logger -t duply-netserver"

    - name: Purge too old backups
      cron:
        name: "Purge old duply backups"
        minute: "0"
        hour: "13"
        weekday: "mon"
        job: ". /root/.duply/netserver/aws_credentials; duply netserver purge 6M --force 2>&1 | /usr/bin/logger -t duply-netserver"


  #
  #  Configure firewall
  #
    - name: Allow SSH traffic in
      ufw: rule=allow name=ssh

    - name: Allow HTTP traffic in
      ufw: rule=allow name='WWW'

    - name: Allow HTTPS traffic in
      ufw: rule=allow name='WWW Secure'

    - name: Allow MQTTS traffic in
      ufw: rule=allow port=8883 proto=tcp

    - name: Allow Zerotier Moon traffic in
      ufw: rule=allow port=9993 proto=udp

    - name: Enable firewall & disable logging
      ufw: state=enabled policy=deny logging=off


  #
  #  Configure email
  #
    - name: Set DMA SMTP authentication
      lineinfile:
        dest: /etc/dma/auth.conf
        state: present
        regexp: "^apikey|smtp.sendgrid.net"
        line: "apikey|smtp.sendgrid.net:{{ chacal.sendgrid.netserver }}"

    - name: Set DMA authpath
      lineinfile:
        dest: /etc/dma/dma.conf
        state: present
        regexp: '^AUTHPATH '
        insertafter: '^#AUTHPATH'
        line: 'AUTHPATH /etc/dma/auth.conf'

    - name: Set DMA smarthost
      lineinfile:
        dest: /etc/dma/dma.conf
        state: present
        regexp: '^SMARTHOST '
        insertafter: '^#SMARTHOST'
        line: 'SMARTHOST smtp.sendgrid.net'

    - name: Set DMA port
      lineinfile:
        dest: /etc/dma/dma.conf
        state: present
        regexp: '^PORT '
        insertafter: '^#PORT'
        line: 'PORT 587'

    - name: Set DMA secure transfer
      lineinfile:
        dest: /etc/dma/dma.conf
        state: present
        regexp: '^SECURETRANSFER'
        insertafter: '^#SECURETRANSFER'
        line: 'SECURETRANSFER'

    - name: Set DMA start tls
      lineinfile:
        dest: /etc/dma/dma.conf
        state: present
        regexp: '^STARTTLS'
        insertafter: '^#STARTTLS'
        line: 'STARTTLS'


  #
  #  Install MQTT server
  #
    - name: Install MQTT server
      include_role:
        name: mqtt-server
      vars:
        mqtt_server_config: |
          autosave_interval 60
          max_queued_messages 500000
          password_file {{ mqtt_server_password_file }}
          allow_anonymous false
          acl_file {{ mqtt_server_acl_file }}

          listener 1883 localhost

          listener 8883
          cafile /etc/letsencrypt/live/grafana.netserver.chacal.fi/chain.pem
          certfile /etc/letsencrypt/live/grafana.netserver.chacal.fi/cert.pem
          keyfile /etc/letsencrypt/live/grafana.netserver.chacal.fi/privkey.pem
          tls_version tlsv1.2
        mqtt_server_users: "{{ chacal.netserver.mqtt_users }}"
        mqtt_server_acl_config: |
          user {{ chacal.netserver.mqtt_users[0].username }}
          topic #

          user {{ chacal.netserver.mqtt_users[1].username }}
          topic signalk/delta

  #
  #  Install Node apps
  #
    - name: Add user for Node apps
      user: name=nodeapp system=yes

    - name: Install FMI Proxy
      include_role:
        name: node-app
      vars:
        node_app_user: "nodeapp"
        node_app_group: "nodeapp"
        node_app_name: "fmiproxy"
        node_app_git_repo: "https://github.com/chacal/fmiproxy"
        node_app_use_socket: false
        node_app_main: "built/App.js"
        node_app_env:
          - PORT=8000
          - FMI_API_KEY={{ chacal.fmiproxy.fmi_api_key }}
          - MOUNT_PREFIX=/fmiproxy

    - name: Install Weather App
      include_role:
        name: node-app
      vars:
        node_app_user: "nodeapp"
        node_app_group: "nodeapp"
        node_app_name: "weather_app"
        node_app_git_repo: "https://github.com/chacal/weatherapp.git"
        node_app_use_socket: false
        node_app_main: "server/app.js"
        node_app_env:
          - PORT=8005

    - name: Install mqtt-to-influxdb-sender
      include_role:
        name: node-app
      vars:
        node_app_user: "nodeapp"
        node_app_group: "nodeapp"
        node_app_name: "mqtt-to-influxdb-sender"
        node_app_git_repo: "https://github.com/chacal/mqtt-to-influxdb-sender.git"
        node_app_main: "built/index.js"
        node_app_use_socket: false
        node_app_env:
          - INFLUXDB_HOST=influxdb.netserver.chacal.fi
          - INFLUXDB_PORT=443
          - INFLUXDB_USERNAME={{ chacal.influxdb.regular_user.username }}
          - INFLUXDB_PASSWORD={{ chacal.influxdb.regular_user.password }}
          - INFLUXDB_DB=sensors
          - MQTT_BROKER=mqtts://mqtt.netserver.chacal.fi
          - MQTT_USERNAME={{ chacal.netserver.mqtt_users[0].username }}
          - MQTT_PASSWORD={{ chacal.netserver.mqtt_users[0].password }}

    - name: Install mqtt-to-postgis-writer
      include_role:
        name: node-app
      vars:
        node_app_user: "nodeapp"
        node_app_group: "nodeapp"
        node_app_name: "mqtt-to-postgis-writer"
        node_app_git_repo: "https://github.com/chacal/mqtt-to-postgis-writer.git"
        node_app_main: "built/Index.js"
        node_app_use_socket: false
        node_app_env:
          - MQTT_BROKER=mqtts://mqtt.netserver.chacal.fi
          - MQTT_USERNAME={{ chacal.netserver.mqtt_users[0].username }}
          - MQTT_PASSWORD={{ chacal.netserver.mqtt_users[0].password }}
          - DB_NAME=marinedata
          - DB_USER={{ chacal.netserver.postgis.username }}
          - DB_PASSWD={{ chacal.netserver.postgis.password }}

    - name: Install postgis-track-server
      include_role:
        name: node-app
      vars:
        node_app_user: "nodeapp"
        node_app_group: "nodeapp"
        node_app_name: "postgis-track-server"
        node_app_git_repo: "https://github.com/chacal/postgis-track-server.git"
        node_app_main: "built/Index.js"
        node_app_use_socket: false
        node_app_env:
          - DB_NAME=marinedata
          - DB_USER={{ chacal.netserver.postgis.username }}
          - DB_PASSWD={{ chacal.netserver.postgis.password }}
          - MOUNT_PREFIX=/postgis-track-server
          - BASIC_AUTH_PASSWD={{ chacal.netserver.track_server.basic_auth_password }}

  #
  #  Install Zerotier Moon
  #
    - name: Install Zerotier
      apt: deb=https://download.zerotier.com/RELEASES/1.2.12/dist/debian/stretch/pool/main/z/zerotier-one/zerotier-one_1.2.12_amd64.deb state=present

    - name: Initialize moon.json
      shell: zerotier-idtool initmoon /var/lib/zerotier-one/identity.public > /var/lib/zerotier-one/moon.json creates=/var/lib/zerotier-one/moon.json

    - name: Configure moon IP
      lineinfile:
        dest: /var/lib/zerotier-one/moon.json
        state: present
        regexp: 'stableEndpoints'
        line: "   \"stableEndpoints\": [\"{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}/9993\", \"{{ hostvars[inventory_hostname]['ansible_default_ipv6']['address'] }}/9993\"]"

    - name: Create moons.d directory
      file: path=/var/lib/zerotier-one/moons.d state=directory

    - name: Generate moon
      shell: zerotier-idtool genmoon /var/lib/zerotier-one/moon.json creates=/var/lib/zerotier-one/moons.d/*.moon chdir=/var/lib/zerotier-one/moons.d
      register: zerotier_moon

    - name: Restart zerotier
      systemd: name=zerotier-one state=restarted enabled=yes
      when: zerotier_moon.changed

