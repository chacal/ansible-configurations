---
#
# Playbook that sets up mosquitto, InfluxDB and mqtt-to-influxdb-sender on sensor-backend.chacal.fi
#
- hosts: sensor-backend.chacal.fi
  remote_user: jihartik
  become: true

  vars_files:
    - secrets.yml

  vars:
    - aws_cli_user: root
    - aws_access_key_id: "{{ chacal.aws.home_infra_certbot.access_key }}"
    - aws_secret_access_key: "{{ chacal.aws.home_infra_certbot.secret_key }}"
    - influx_cli_auth_params: '-username {{ chacal.influxdb.admin_user.username }} -password {{ chacal.influxdb.admin_user.password }}'
    - influx_cmd: 'influx -ssl -host sensor-backend.chacal.fi'

  handlers:
    - name: Restart InfluxDB
      service: name=influxdb state=restarted
    - name: Restart ClickHouse
      service: name=clickhouse-server state=restarted

  roles:
    - role: filebeat
      filebeat_elasticsearch_hosts:
        - elastic.chacal.fi
    - role: debian_common
    - role: prometheus_node_exporter
    - role: self_monitoring
    - role: ouroboros
      ouroboros_notifier: "sendgrid://{{ chacal.sendgrid.ouroboros }}:root@{{ inventory_hostname }}/{{ chacal.ouroboros.email }}"

    - name: certbot-dns-route53
      certbot_email: "{{ chacal.certbot.email }}"
      certbot_deploy_hook: |
        #!/bin/bash
        echo "Restarting mosquitto, InfluxDB & ClickHouse due to updated certificates.."
        mkdir -p /etc/influxdb
        cp /etc/letsencrypt/live/sensor-backend.chacal.fi/fullchain.pem /etc/influxdb/
        cp /etc/letsencrypt/live/sensor-backend.chacal.fi/privkey.pem /etc/influxdb/
        chown influxdb:influxdb /etc/influxdb/*.pem
        mkdir -p /etc/clickhouse-server
        cp /etc/letsencrypt/live/sensor-backend.chacal.fi/fullchain.pem /etc/clickhouse-server/server.crt
        cp /etc/letsencrypt/live/sensor-backend.chacal.fi/privkey.pem /etc/clickhouse-server/server.key
        chown clickhouse:clickhouse /etc/clickhouse-server/server.crt
        chown clickhouse:clickhouse /etc/clickhouse-server/server.key
        systemctl restart mosquitto || true
        systemctl restart influxdb || true
        systemctl restart clickhouse-server || true
      tags: certbot

    - name: mqtt-server
      mqtt_server_config: |
        log_dest syslog
        log_type none
        log_type error
        log_type warning
        log_type notice
        autosave_interval 60
        max_queued_messages 500000
        password_file {{ mqtt_server_password_file }}
        allow_anonymous false
        acl_file {{ mqtt_server_acl_file }}
        persistent_client_expiration 14d

        listener 1883 localhost

        listener 8883
        cafile /etc/letsencrypt/live/sensor-backend.chacal.fi/chain.pem
        certfile /etc/letsencrypt/live/sensor-backend.chacal.fi/cert.pem
        keyfile /etc/letsencrypt/live/sensor-backend.chacal.fi/privkey.pem
        tls_version tlsv1.2
      mqtt_server_users: "{{ chacal.sensor_backend.mqtt_users }}"
      mqtt_server_acl_config: |
        user {{ chacal.sensor_backend.mqtt_users[0].username }}
        topic #
      tags: mosquitto

    - name: influxdb
      tags: influxdb

    - name: duply_to_s3
      dupply_to_s3_conf: |
        GPG_PW='{{ chacal.sensor_backend.duply.pgp_key }}'

        TARGET='s3://s3-eu-west-1.amazonaws.com/chacal-backups/sensor-backend.chacal.fi'

        SOURCE='/'

        MAX_FULLBKP_AGE=1W
        DUPL_PARAMS="$DUPL_PARAMS --full-if-older-than $MAX_FULLBKP_AGE "
        DUPL_PARAMS="$DUPL_PARAMS --s3-european-buckets --s3-use-new-style --s3-use-ia --allow-source-mismatch"
      dupply_to_s3_exclude: |
        + /var/lib/influxdb
        + /var/lib/clickhouse
        **
      duply_to_s3_access_key: "{{ chacal.aws.sensor_backend_backup.access_key }}"
      duply_to_s3_secret_key: "{{ chacal.aws.sensor_backend_backup.secret_key }}"

  tasks:
    - name: Configure InfluxDB to use HTTPS
      lineinfile:
        dest: /etc/influxdb/influxdb.conf
        state: present
        regexp: '^  https-enabled = '
        insertafter: '^  # https-enabled = false'
        line: '  https-enabled = true'
      notify: Restart InfluxDB
      tags: influxdb

    - name: Configure InfluxDB HTTPS certificate
      lineinfile:
        dest: /etc/influxdb/influxdb.conf
        state: present
        regexp: '^  https-certificate = '
        insertafter: '^  # https-certificate = '
        line: '  https-certificate = "/etc/influxdb/fullchain.pem"'
      notify: Restart InfluxDB
      tags: influxdb

    - name: Configure InfluxDB HTTPS private key
      lineinfile:
        dest: /etc/influxdb/influxdb.conf
        state: present
        regexp: '^  https-private-key = '
        insertafter: '^  # https-private-key = '
        line: '  https-private-key = "/etc/influxdb/privkey.pem"'
      notify: Restart InfluxDB
      tags: influxdb

    - name: Configure InfluxDB backup service to listen only on localhost
      lineinfile:
        dest: /etc/influxdb/influxdb.conf
        state: present
        regexp: '^bind-address = '
        insertafter: '^# bind-address = "127.0.0.1:8088"'
        line: 'bind-address = "localhost:8088"'
      notify: Restart InfluxDB
      tags: influxdb

    - name: Configure InfluxDB to use authentication
      lineinfile:
        dest: /etc/influxdb/influxdb.conf
        state: present
        regexp: '^  auth-enabled = '
        insertafter: '^  # auth-enabled = false'
        line: '  auth-enabled = true'
      notify: Restart InfluxDB
      tags: influxdb

    - name: Configure InfluxDB to not log HTTP requests
      lineinfile:
        dest: /etc/influxdb/influxdb.conf
        state: present
        regexp: '^  log-enabled = '
        insertafter: '^\[http\]'
        line: '  log-enabled = false'
      notify: Restart InfluxDB
      tags: influxdb

    - name: Configure InfluxDB to not log queries
      lineinfile:
        dest: /etc/influxdb/influxdb.conf
        state: present
        regexp: '^  query-log-enabled ='
        insertafter: '^  # query-log-enabled = true'
        line: '  query-log-enabled = false'
      notify: Restart InfluxDB
      tags: influxdb

    - name: Configure InfluxDB WAL fsync delay
      lineinfile:
        dest: /etc/influxdb/influxdb.conf
        state: present
        regexp: '^  wal-fsync-delay ='
        insertafter: '^  # wal-fsync-delay = "0s"'
        line: '  wal-fsync-delay = "1s"'
      notify: Restart InfluxDB
      tags: influxdb


    # Flush handlers to restart InfluxDB with SSL connection enabled
    - meta: flush_handlers


    - name: Check if InfluxDB admin user has been created
      command: '{{ influx_cmd }} -execute "SHOW USERS" {{ influx_cli_auth_params }}'
      register: influx_admin_check
      failed_when: influx_admin_check.rc > 1
      changed_when: "influx_admin_check.rc > 0"
      tags: influxdb

    - name: Create InfluxDB admin user
      command: "{{ influx_cmd }} -execute \"CREATE USER {{ chacal.influxdb.admin_user.username }} WITH PASSWORD '{{ chacal.influxdb.admin_user.password }}' WITH ALL PRIVILEGES\""
      when: influx_admin_check.changed
      tags: influxdb

    - name: Check if sensors database has been created
      command: '{{ influx_cmd }} -execute "SHOW DATABASES" {{ influx_cli_auth_params }}'
      register: influx_db_check
      changed_when: "'sensors' not in influx_db_check.stdout"
      tags: influxdb

    - name: Create InfluxDB database
      command: '{{ influx_cmd }} -execute "CREATE DATABASE sensors" {{ influx_cli_auth_params }}'
      when: influx_db_check.changed
      tags: influxdb

    - name: Gather InfluxDB users
      command: '{{ influx_cmd }} -execute "SHOW USERS" {{ influx_cli_auth_params }}'
      register: influxdb_users
      changed_when: False
      tags: influxdb

    - name: Create InfluxDB regular user
      command: "{{ influx_cmd }} -execute \"CREATE USER {{ chacal.influxdb.regular_user.username }} WITH PASSWORD '{{ chacal.influxdb.regular_user.password }}'\" {{ influx_cli_auth_params }}"
      when: "chacal.influxdb.regular_user.username not in influxdb_users.stdout"
      tags: influxdb

    - name: Grant DB access to regular user
      command: '{{ influx_cmd }} -execute "GRANT ALL ON sensors TO {{ chacal.influxdb.regular_user.username }}" {{ influx_cli_auth_params }}'
      when: "chacal.influxdb.regular_user.username not in influxdb_users.stdout"
      tags: influxdb

    - name: Create InfluxDB readonly user
      command: "{{ influx_cmd }} -execute \"CREATE USER {{ chacal.influxdb.readonly_user.username }} WITH PASSWORD '{{ chacal.influxdb.readonly_user.password }}'\" {{ influx_cli_auth_params }}"
      when: "chacal.influxdb.readonly_user.username not in influxdb_users.stdout"
      tags: influxdb

    - name: Grant DB access to readonly user
      command: '{{ influx_cmd }} -execute "GRANT READ ON sensors TO {{ chacal.influxdb.readonly_user.username }}" {{ influx_cli_auth_params }}'
      when: "chacal.influxdb.readonly_user.username not in influxdb_users.stdout"
      tags: influxdb


    - name: Add ClickHouse apt key
      apt_key:
        keyserver: hkp://keyserver.ubuntu.com:80
        id: E0C56BD4
      tags: clickhouse

    - name: Add ClickHouse repository
      apt_repository:
        repo: "deb http://repo.clickhouse.tech/deb/stable/ main/"
        state: present
      tags: clickhouse

    - name: Install ClickHouse
      apt:
        state: latest
        cache_valid_time: 3600
        pkg:
          - clickhouse-client
          - clickhouse-server
      tags: clickhouse

    - name: Generate DH params for ClickHouse
      command:
        cmd: openssl dhparam -out /etc/clickhouse-server/dhparam.pem 4096
        creates: /etc/clickhouse-server/dhparam.pem
      notify: Restart ClickHouse
      tags: clickhouse

    - name: Configure ClickHouse
      copy:
        dest: /etc/clickhouse-server/config.d/custom_config.xml
        content: |
          <?xml version="1.0"?>
          <yandex>
            <logger>
              <level>notice</level>
            </logger>
            <https_port>8443</https_port>
            <tcp_port_secure>9440</tcp_port_secure>
            <listen_host>0.0.0.0</listen_host>

            <http_port remove="true"/>
            <tcp_port remove="true"/>
            <mysql_port remove="true"/>
            <interserver_http_port remove="true"/>
          </yandex>
      notify: Restart ClickHouse
      tags: clickhouse

    - name: Add ClickHouse users
      copy:
        dest: /etc/clickhouse-server/users.d/custom_users.xml
        content: |
          <?xml version="1.0"?>
          <yandex>
            <users>
              <default>
                <!-- Restrict default (passwordless) user to local access -->
                <networks>
                  <ip>::1</ip>
                  <ip>127.0.0.1</ip>
                </networks>
              </default>

              <!-- User with r/w access -->
              <{{ chacal.sensor_backend.clickhouse.rw_user.username }}>
                <password_sha256_hex>{{ chacal.sensor_backend.clickhouse.rw_user.sha256 }}</password_sha256_hex>
                <networks>
                  <ip>10.0.0.0/8</ip>
                  <ip>172.16.0.0/12</ip>
                  <ip>::1</ip>
                  <ip>127.0.0.1</ip>
                </networks>
                <profile>default</profile>
                <quota>default</quota>
              </{{ chacal.sensor_backend.clickhouse.rw_user.username }}>

              <!-- User with ro access -->
              <{{ chacal.sensor_backend.clickhouse.ro_user.username }}>
                <password_sha256_hex>{{ chacal.sensor_backend.clickhouse.ro_user.sha256 }}</password_sha256_hex>
                <networks>
                  <ip>10.0.0.0/8</ip>
                  <ip>172.16.0.0/12</ip>
                  <ip>::1</ip>
                  <ip>127.0.0.1</ip>
                </networks>
                <profile>readonly</profile>
                <quota>default</quota>
              </{{ chacal.sensor_backend.clickhouse.ro_user.username }}>
            </users>
          </yandex>
      notify: Restart ClickHouse
      tags: clickhouse



    - name: Install mqtt-to-db-sender for writing to InfluxDB
      include_role:
        name: docker-app
      vars:
        docker_regular_user: "{{ ansible_user }}"
        docker_app_name: "mqtt-to-db-sender-influxdb"
        docker_app_container_name: "jihartik/mqtt-to-db-sender"
        docker_app_extra_params: "--init"
        docker_app_env:
          - DB_TYPE=influxdb
          - DB_HOST=sensor-backend.chacal.fi
          - DB_PORT=8086
          - DB_USERNAME={{ chacal.influxdb.regular_user.username }}
          - DB_PASSWORD={{ chacal.influxdb.regular_user.password }}
          - DB_NAME=sensors
          - MQTT_BROKER=mqtts://sensor-backend.chacal.fi
          - MQTT_USERNAME={{ chacal.sensor_backend.mqtt_users[0].username }}
          - MQTT_PASSWORD={{ chacal.sensor_backend.mqtt_users[0].password }}
          - MQTT_CLIENT_ID=sensor-backend-influxdb-sender

    - name: Install mqtt-to-db-sender for writing to ClickHouse
      include_role:
        name: docker-app
      vars:
        docker_regular_user: "{{ ansible_user }}"
        docker_app_name: "mqtt-to-db-sender-clickhouse"
        docker_app_container_name: "jihartik/mqtt-to-db-sender"
        docker_app_extra_params: "--init"
        docker_app_env:
          - DB_TYPE=clickhouse
          - DB_HOST=sensor-backend.chacal.fi
          - DB_PORT=8443
          - DB_USERNAME={{ chacal.sensor_backend.clickhouse.rw_user.username }}
          - DB_PASSWORD={{ chacal.sensor_backend.clickhouse.rw_user.password }}
          - DB_NAME=default
          - MQTT_BROKER=mqtts://sensor-backend.chacal.fi
          - MQTT_USERNAME={{ chacal.sensor_backend.mqtt_users[0].username }}
          - MQTT_PASSWORD={{ chacal.sensor_backend.mqtt_users[0].password }}
          - MQTT_CLIENT_ID=sensor-backend-clickhouse-sender