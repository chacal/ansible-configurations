---
#
# Playbook that sets up mosquitto, InfluxDB, ClickHouse and 2 x mqtt-to-db-sender on sensor-backend.chacal.fi
#
- hosts: sensor-backend.chacal.fi
  remote_user: jihartik
  become: true

  vars_files:
    - secrets.yml

  vars:
    - aws_cli_user: root
    - aws_access_key_id: "{{ chacal.aws.home_infra_certbot.access_key }}"
    - aws_secret_access_key: "{{ chacal.aws.home_infra_certbot.secret_key }}"
    - influx_cli_auth_params: '-username {{ chacal.influxdb.admin_user.username }} -password {{ chacal.influxdb.admin_user.password }}'
    - influx_cmd: 'influx -ssl -host sensor-backend.chacal.fi'
    - chproxy_listen_port: 9443
    - docker_custom_registry: "https://docker-registry.chacal.fi"

  handlers:
    - name: Restart InfluxDB
      service: name=influxdb state=restarted
    - name: Restart chproxy
      service: name=chproxy state=restarted

  roles:
    - role: filebeat
      filebeat_elasticsearch_hosts:
        - elastic.chacal.fi
    - role: debian_common
      unattended_upgrades_origins: '"o=elastic";"o=InfluxDB";"o=main";"o=Docker";'
    - role: ikifi_with_dma
      tags: ikifi
    - role: prometheus_node_exporter
    - role: ouroboros
      ouroboros_notifier: "sendgrid://{{ chacal.sendgrid.ouroboros }}:root@{{ inventory_hostname }}/{{ chacal.ouroboros.email }}"

    - name: certbot-dns-route53
      certbot_email: "{{ chacal.certbot.email }}"
      certbot_deploy_hook: |
        #!/bin/bash
        echo "Restarting mosquitto, InfluxDB & ClickHouse due to updated certificates.."
        mkdir -p /etc/influxdb
        cp /etc/letsencrypt/live/sensor-backend.chacal.fi/fullchain.pem /etc/influxdb/
        cp /etc/letsencrypt/live/sensor-backend.chacal.fi/privkey.pem /etc/influxdb/
        chown influxdb:influxdb /etc/influxdb/*.pem

        mkdir -p /etc/clickhouse-server
        cp /etc/letsencrypt/live/sensor-backend.chacal.fi/fullchain.pem /etc/clickhouse-server/server.crt
        cp /etc/letsencrypt/live/sensor-backend.chacal.fi/privkey.pem /etc/clickhouse-server/server.key
        chown clickhouse:clickhouse /etc/clickhouse-server/server.crt
        chown clickhouse:clickhouse /etc/clickhouse-server/server.key

        mkdir -p /srv/chproxy/certs
        cp /etc/letsencrypt/live/sensor-backend.chacal.fi/fullchain.pem /srv/chproxy/certs/server.crt
        cp /etc/letsencrypt/live/sensor-backend.chacal.fi/privkey.pem /srv/chproxy/certs/server.key
        chown 1000:1000 /srv/chproxy/certs/server.crt
        chown 1000:1000 /srv/chproxy/certs/server.key

        cp /etc/letsencrypt/live/sensor-backend.chacal.fi/chain.pem /etc/mosquitto/certs/chain.pem
        cp /etc/letsencrypt/live/sensor-backend.chacal.fi/cert.pem /etc/mosquitto/certs/cert.pem
        cp /etc/letsencrypt/live/sensor-backend.chacal.fi/privkey.pem /etc/mosquitto/certs/privkey.pem
        chown mosquitto:mosquitto /etc/mosquitto/certs/*.pem
        chmod 0600 /etc/mosquitto/certs/*.pem
        pkill -HUP -x mosquitto || true

        systemctl restart influxdb || true
        systemctl restart clickhouse-server || true
        systemctl restart chproxy || true
      tags: certbot

    - name: mqtt-server
      mqtt_server_config: |
        log_dest syslog
        log_type none
        log_type error
        log_type warning
        log_type notice
        autosave_interval 60
        max_queued_messages 500000
        password_file {{ mqtt_server_password_file }}
        allow_anonymous false
        acl_file {{ mqtt_server_acl_file }}
        persistent_client_expiration 14d

        listener 1883 localhost

        listener 8883
        cafile /etc/mosquitto/certs/chain.pem
        certfile /etc/mosquitto/certs/cert.pem
        keyfile /etc/mosquitto/certs/privkey.pem
        tls_version tlsv1.2
      mqtt_server_users: "{{ chacal.sensor_backend.mqtt_users }}"
      mqtt_server_acl_config: |
        user {{ chacal.sensor_backend.mqtt_users[0].username }}
        topic #
      tags: mosquitto

    - name: influxdb
      tags: influxdb

    - role: duplicacy
      duplicacy_filters: |
        +var/
        +var/lib/
        +var/lib/influxdb/*
        +var/lib/clickhouse/*
        -*
      duplicacy_encryption_key: "{{ chacal.sensor_backend.duplicacy.encryption_key }}"
      duplicacy_environment:
        DUPLICACY_B2_ID: "{{ chacal.sensor_backend.duplicacy.b2_id }}"
        DUPLICACY_B2_KEY: "{{ chacal.sensor_backend.duplicacy.b2_key }}"

    - name: clickhouse
      clickhouse_custom_config: |
        <?xml version="1.0"?>
        <clickhouse>
          <logger>
            <level>notice</level>
          </logger>
          <metric_log remove="remove"/>
          <query_log remove="remove"/>
          <query_thread_log remove="remove"/>
          <asynchronous_metric_log remove="remove"/>
          <trace_log remove="remove"/>
          <text_log remove="remove"/>

          <https_port>8443</https_port>
          <tcp_port_secure>9440</tcp_port_secure>
          <interserver_https_port>9009</interserver_https_port>
          <listen_host>0.0.0.0</listen_host>

          <tcp_port remove="true"/>
          <mysql_port remove="true"/>
          <interserver_http_port remove="true"/>

          <interserver_http_credentials>
            <user>{{ chacal.sensor_backend.clickhouse.interserver_user.username }}</user>
            <password>{{ chacal.sensor_backend.clickhouse.interserver_user.password }}</password>
          </interserver_http_credentials>

          <openSSL>
            <server>
              <certificateFile>/etc/clickhouse-server/server.crt</certificateFile>
              <privateKeyFile>/etc/clickhouse-server/server.key</privateKeyFile>
            </server>
          </openSSL>

          <macros>
            <shard>01</shard>
            <replica>{{ inventory_hostname }}</replica>
          </macros>
        </clickhouse>
      clickhouse_user_config: |
        <?xml version="1.0"?>
        <yandex>
          <users>
            <default>
              <!-- Restrict default (passwordless) user to local access -->
              <networks>
                <ip>::1</ip>
                <ip>127.0.0.1</ip>
              </networks>
            </default>

            <!-- User with r/w access -->
            <{{ chacal.sensor_backend.clickhouse.rw_user.username }}>
              <password_sha256_hex>{{ chacal.sensor_backend.clickhouse.rw_user.sha256 }}</password_sha256_hex>
              <networks>
                <ip>10.0.0.0/8</ip>
                <ip>172.16.0.0/12</ip>
                <ip>::1</ip>
                <ip>127.0.0.1</ip>
              </networks>
              <profile>default</profile>
              <quota>default</quota>
            </{{ chacal.sensor_backend.clickhouse.rw_user.username }}>

            <!-- User with ro access -->
            <{{ chacal.sensor_backend.clickhouse.ro_user.username }}>
              <password_sha256_hex>{{ chacal.sensor_backend.clickhouse.ro_user.sha256 }}</password_sha256_hex>
              <networks>
                <ip>10.0.0.0/8</ip>
                <ip>172.16.0.0/12</ip>
                <ip>::1</ip>
                <ip>127.0.0.1</ip>
              </networks>
              <profile>readonly</profile>
              <quota>default</quota>
            </{{ chacal.sensor_backend.clickhouse.ro_user.username }}>
          </users>
        </yandex>

  tasks:
    - name: Install prometheus self monitoring for OS
      include_role:
        name: self_monitoring
      tags: self_monitoring

    - name: Install prometheus self monitoring for chproxy
      include_role:
        name: self_monitoring
      vars:
        self_monitoring_target_port: "{{ chproxy_listen_port }}"
        self_monitoring_use_https: True
      tags: self_monitoring

    - name: Configure InfluxDB to use HTTPS
      lineinfile:
        dest: /etc/influxdb/influxdb.conf
        state: present
        regexp: '^  https-enabled = '
        insertafter: '^  # https-enabled = false'
        line: '  https-enabled = true'
      notify: Restart InfluxDB
      tags: influxdb

    - name: Configure InfluxDB HTTPS certificate
      lineinfile:
        dest: /etc/influxdb/influxdb.conf
        state: present
        regexp: '^  https-certificate = '
        insertafter: '^  # https-certificate = '
        line: '  https-certificate = "/etc/influxdb/fullchain.pem"'
      notify: Restart InfluxDB
      tags: influxdb

    - name: Configure InfluxDB HTTPS private key
      lineinfile:
        dest: /etc/influxdb/influxdb.conf
        state: present
        regexp: '^  https-private-key = '
        insertafter: '^  # https-private-key = '
        line: '  https-private-key = "/etc/influxdb/privkey.pem"'
      notify: Restart InfluxDB
      tags: influxdb

    - name: Configure InfluxDB backup service to listen only on localhost
      lineinfile:
        dest: /etc/influxdb/influxdb.conf
        state: present
        regexp: '^bind-address = '
        insertafter: '^# bind-address = "127.0.0.1:8088"'
        line: 'bind-address = "localhost:8088"'
      notify: Restart InfluxDB
      tags: influxdb

    - name: Configure InfluxDB to use authentication
      lineinfile:
        dest: /etc/influxdb/influxdb.conf
        state: present
        regexp: '^  auth-enabled = '
        insertafter: '^  # auth-enabled = false'
        line: '  auth-enabled = true'
      notify: Restart InfluxDB
      tags: influxdb

    - name: Configure InfluxDB to not log HTTP requests
      lineinfile:
        dest: /etc/influxdb/influxdb.conf
        state: present
        regexp: '^  log-enabled = '
        insertafter: '^\[http\]'
        line: '  log-enabled = false'
      notify: Restart InfluxDB
      tags: influxdb

    - name: Configure InfluxDB to not log queries
      lineinfile:
        dest: /etc/influxdb/influxdb.conf
        state: present
        regexp: '^  query-log-enabled ='
        insertafter: '^  # query-log-enabled = true'
        line: '  query-log-enabled = false'
      notify: Restart InfluxDB
      tags: influxdb

    - name: Configure InfluxDB WAL fsync delay
      lineinfile:
        dest: /etc/influxdb/influxdb.conf
        state: present
        regexp: '^  wal-fsync-delay ='
        insertafter: '^  # wal-fsync-delay = "0s"'
        line: '  wal-fsync-delay = "5s"'
      notify: Restart InfluxDB
      tags: influxdb


    # Flush handlers to restart InfluxDB with SSL connection enabled
    - meta: flush_handlers


    - name: Check if InfluxDB admin user has been created
      command: '{{ influx_cmd }} -execute "SHOW USERS" {{ influx_cli_auth_params }}'
      register: influx_admin_check
      failed_when: influx_admin_check.rc > 1
      changed_when: "influx_admin_check.rc > 0"
      tags: influxdb

    - name: Create InfluxDB admin user
      command: "{{ influx_cmd }} -execute \"CREATE USER {{ chacal.influxdb.admin_user.username }} WITH PASSWORD '{{ chacal.influxdb.admin_user.password }}' WITH ALL PRIVILEGES\""
      when: influx_admin_check.changed
      tags: influxdb

    - name: Check if sensors database has been created
      command: '{{ influx_cmd }} -execute "SHOW DATABASES" {{ influx_cli_auth_params }}'
      register: influx_db_check
      changed_when: "'sensors' not in influx_db_check.stdout"
      tags: influxdb

    - name: Create InfluxDB database
      command: '{{ influx_cmd }} -execute "CREATE DATABASE sensors" {{ influx_cli_auth_params }}'
      when: influx_db_check.changed
      tags: influxdb

    - name: Gather InfluxDB users
      command: '{{ influx_cmd }} -execute "SHOW USERS" {{ influx_cli_auth_params }}'
      register: influxdb_users
      changed_when: False
      check_mode: no
      tags: influxdb

    - name: Create InfluxDB regular user
      command: "{{ influx_cmd }} -execute \"CREATE USER {{ chacal.influxdb.regular_user.username }} WITH PASSWORD '{{ chacal.influxdb.regular_user.password }}'\" {{ influx_cli_auth_params }}"
      when: "chacal.influxdb.regular_user.username not in influxdb_users.stdout"
      tags: influxdb

    - name: Grant DB access to regular user
      command: '{{ influx_cmd }} -execute "GRANT ALL ON sensors TO {{ chacal.influxdb.regular_user.username }}" {{ influx_cli_auth_params }}'
      when: "chacal.influxdb.regular_user.username not in influxdb_users.stdout"
      tags: influxdb

    - name: Create InfluxDB readonly user
      command: "{{ influx_cmd }} -execute \"CREATE USER {{ chacal.influxdb.readonly_user.username }} WITH PASSWORD '{{ chacal.influxdb.readonly_user.password }}'\" {{ influx_cli_auth_params }}"
      when: "chacal.influxdb.readonly_user.username not in influxdb_users.stdout"
      tags: influxdb

    - name: Grant DB access to readonly user
      command: '{{ influx_cmd }} -execute "GRANT READ ON sensors TO {{ chacal.influxdb.readonly_user.username }}" {{ influx_cli_auth_params }}'
      when: "chacal.influxdb.readonly_user.username not in influxdb_users.stdout"
      tags: influxdb


    - name: Install mqtt-to-db-sender for writing to InfluxDB
      include_role:
        name: docker-app
      vars:
        docker_regular_user: "{{ ansible_user }}"
        docker_app_name: "mqtt-to-db-sender-influxdb"
        docker_app_container_name: "jihartik/mqtt-to-db-sender"
        docker_app_extra_params: "--init"
        docker_app_env:
          - DB_TYPE=influxdb
          - DB_HOST=sensor-backend.chacal.fi
          - DB_PORT=8086
          - DB_USERNAME={{ chacal.influxdb.regular_user.username }}
          - DB_PASSWORD={{ chacal.influxdb.regular_user.password }}
          - DB_NAME=sensors
          - MQTT_BROKER=mqtts://sensor-backend.chacal.fi
          - MQTT_USERNAME={{ chacal.sensor_backend.mqtt_users[0].username }}
          - MQTT_PASSWORD={{ chacal.sensor_backend.mqtt_users[0].password }}
          - MQTT_CLIENT_ID=sensor-backend-influxdb-sender
      tags: mqtt-to-db-sender-influxdb

    - name: Install mqtt-to-db-sender for writing to ClickHouse
      include_role:
        name: docker-app
      vars:
        docker_regular_user: "{{ ansible_user }}"
        docker_app_name: "mqtt-to-db-sender-clickhouse"
        docker_app_container_name: "jihartik/mqtt-to-db-sender"
        docker_app_extra_params: "--init"
        docker_app_env:
          - DB_TYPE=clickhouse
          - DB_HOST=sensor-backend.chacal.fi
          - DB_PORT=8443
          - DB_USERNAME={{ chacal.sensor_backend.clickhouse.rw_user.username }}
          - DB_PASSWORD={{ chacal.sensor_backend.clickhouse.rw_user.password }}
          - DB_NAME=default
          - MQTT_BROKER=mqtts://sensor-backend.chacal.fi
          - MQTT_USERNAME={{ chacal.sensor_backend.mqtt_users[0].username }}
          - MQTT_PASSWORD={{ chacal.sensor_backend.mqtt_users[0].password }}
          - MQTT_CLIENT_ID=sensor-backend-clickhouse-sender
      tags: mqtt-to-db-sender-clickhouse

    - name: Create data directory for chproxy
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - /srv/chproxy
        - /srv/chproxy/certs
      tags: chproxy

    - name: Configure chproxy
      copy:
        dest: /srv/chproxy/config.yml
        content: |
          server:
            https:
                listen_addr: ":{{ chproxy_listen_port }}"
                # Allow queries to chproxy only from DMZ
                allowed_networks: ["10.40.102.0/24"]
                cert_file: /etc/certs/server.crt
                key_file: /etc/certs/server.key

          users:
            - name: "{{ chacal.sensor_backend.clickhouse.ro_user.username }}"
              password: "{{ chacal.sensor_backend.clickhouse.ro_user.password }}"
              to_cluster: "sensors-cluster"
              to_user: "{{ chacal.sensor_backend.clickhouse.ro_user.username }}"

          clusters:
            - name: "sensors-cluster"
              scheme: "http"
              nodes: [
                "sensor-backend.chacal.fi:8123"
              ]
              users:
                - name: "{{ chacal.sensor_backend.clickhouse.ro_user.username }}"
                  password: "{{ chacal.sensor_backend.clickhouse.ro_user.password }}"
        mode: 0600
      notify: Restart chproxy
      tags: chproxy

    - name: Install chproxy
      include_role:
        name: docker-app
      vars:
        docker_regular_user: "{{ ansible_user }}"
        docker_app_name: "chproxy"
        docker_app_container_name: "tacyuuhon/clickhouse-chproxy"
        docker_app_extra_params: "-v /srv/chproxy/config.yml:/opt/config.yml -v /srv/chproxy/certs:/etc/certs -v /etc/ssl/certs:/etc/ssl/certs"
        docker_app_ports:
          - "0.0.0.0:{{ chproxy_listen_port }}:{{ chproxy_listen_port }}"
      tags: chproxy
