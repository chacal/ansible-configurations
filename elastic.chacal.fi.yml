---
#
# Playbook that sets up ELK stack on Buster base VM
#
- hosts: elastic.chacal.fi
  become: true

  vars_files:
    - secrets.yml

  handlers:
    - name: Restart Kibana
      service: name=kibana state=restarted

  vars:
    - aws_cli_user: root
    - aws_access_key_id: "{{ chacal.aws.home_infra_certbot.access_key }}"
    - aws_secret_access_key: "{{ chacal.aws.home_infra_certbot.secret_key }}"
    - elastic_version: 8.3.3

  roles:
    - role: filebeat
      filebeat_elasticsearch_hosts:
        - elastic.chacal.fi
      filebeat_exclude_files:
        - "/var/log/elasticsearch/elasticsearch_deprecation*"

    - role: debian_common
      unattended_upgrades_origins: '"o=elastic";'

    - role: prometheus_node_exporter
    - role: self_monitoring

    - role: certbot-dns-route53
      certbot_email: "{{ chacal.certbot.email }}"
      certbot_deploy_hook: |
        #!/bin/bash
        echo "Updating certificates with certbot deploy-hook.."
        cp /etc/letsencrypt/live/elastic.chacal.fi/fullchain.pem /etc/kibana/
        cp /etc/letsencrypt/live/elastic.chacal.fi/privkey.pem /etc/kibana/
        chown kibana:kibana /etc/kibana/*.pem
        systemctl restart kibana.service || true
        cp /etc/letsencrypt/live/elastic.chacal.fi/fullchain.pem /etc/elasticsearch/certs/
        cp /etc/letsencrypt/live/elastic.chacal.fi/privkey.pem /etc/elasticsearch/certs/
        chown elasticsearch:elasticsearch /etc/elasticsearch/certs/*.pem
        systemctl restart elasticsearch.service || true
        echo "Let's encrypt certificates updated and services restarted"

    - role: duplicacy
      duplicacy_filters: |
        +srv/
        +srv/elastic_snapshots/*
        -*
      duplicacy_backup_hours: "1"
      duplicacy_prune_hours: "3"
      duplicacy_encryption_key: "{{ chacal.elastic.duplicacy.encryption_key }}"
      duplicacy_environment:
        DUPLICACY_B2_ID: "{{ chacal.elastic.duplicacy.b2_id }}"
        DUPLICACY_B2_KEY: "{{ chacal.elastic.duplicacy.b2_key }}"

  tasks:
    - name: Copy certificates from remote to localhost
      fetch:
        src: "/etc/letsencrypt/live/elastic.chacal.fi/{{ item }}"
        dest: "conf/elastic.chacal.fi/"
        flat: true
      loop:
        - fullchain.pem
        - privkey.pem

    - name: Install Elasticsearch
      include_role:
        name: elastic.elasticsearch
      vars:
        es_version: "{{ elastic_version }}"
        es_heap_size: 3g
        es_config:
          network.host: 0.0.0.0
          discovery.seed_hosts: "{{ ansible_default_ipv4.address }}"
          cluster.initial_master_nodes: "{{ ansible_default_ipv4.address }}"
        es_path_repo: /srv/elastic_snapshots
        es_jvm_custom_parameters:
          - "-Xlog:disable"      # Disable JVM GC logging
        es_users:
          native:
            kibana:
              password: "{{ chacal.elastic.es.passwords.kibana }}"
            jihartik:
              password: "{{ chacal.elastic.es.passwords.jihartik }}"
              roles:
                - kibana_admin
                - log_reader
                - poweruser
            filebeat:
              password: "{{ chacal.elastic.es.passwords.filebeat }}"
              roles:
                - filebeat_writer
                - ingest_admin
            grafana:
              password: "{{ chacal.elastic.es.passwords.grafana }}"
              roles:
                - log_reader
        es_roles:
          native:
            log_reader:
              indices:
                - names: 'filebeat-*'
                  privileges:
                    - read
            poweruser:
              cluster:
                - manage
                - manage_ilm
                - manage_index_templates
            filebeat_writer:
              cluster:
                - monitor
                - read_ilm
                - manage_ilm
              indices:
                - names: 'filebeat-*'
                  privileges:
                    - create_doc
                    - manage
        es_api_host: "{{ inventory_hostname }}"
        es_api_basic_auth_username: elastic
        es_api_basic_auth_password: "{{ chacal.elastic.es.passwords.elastic }}"
        es_enable_http_ssl: true
        es_enable_transport_ssl: true
        es_ssl_certificate: conf/elastic.chacal.fi/fullchain.pem
        es_ssl_key: conf/elastic.chacal.fi/privkey.pem

    - name: Ensure certs are copied for the first time
      command:
        cmd: /etc/letsencrypt/renewal-hooks/deploy/10-default.sh
        creates: /etc/kibana/fullchain.pem
      tags: kibana

    - name: Install Kibana
      include_role:
        name: kibana
      vars:
        kibana_ssl_cert_path: "/etc/kibana/fullchain.pem"
        kibana_ssl_key_path: "/etc/kibana/privkey.pem"
        kibana_elasticsearch_url: "https://{{ inventory_hostname }}:9200"
        kibana_elasticsearch_username: kibana
        kibana_elasticsearch_password: "{{ chacal.elastic.es.passwords.kibana }}"
      tags: kibana

    - name: Create /srv
      file:
        path: "/srv"
        state: directory
      tags: elastic_search

    - name: Create Elasticsearch snapshot directory
      file:
        path: "/srv/elastic_snapshots"
        state: directory
        owner: elasticsearch
        group: elasticsearch
      tags: elastic_search

    - meta: flush_handlers

    - name: Create local snapshot repository
      uri:
        url: "https://{{ inventory_hostname }}:9200/_snapshot/local_repository"
        method: PUT
        user: elastic
        password: "{{ chacal.elastic.es.passwords.elastic }}"
        force_basic_auth: true
        body: |
          {
            "type": "fs",
            "settings": {
              "location": "/srv/elastic_snapshots"
            }
          }
        status_code: 200
        body_format: json
      tags: elastic_search

    - name: Configure snapshot policy
      uri:
        url: "https://{{ inventory_hostname }}:9200/_slm/policy/local_snapshots"
        method: PUT
        user: elastic
        password: "{{ chacal.elastic.es.passwords.elastic }}"
        force_basic_auth: true
        body: |
          {
            "schedule": "0 30 1/6 * * ?",
            "name": "<elastic-snap-{now/m{yyyyMMdd-HHmm|Europe/Helsinki}}>",
            "repository": "local_repository",
            "config": {
              "indices": ["*"]
            },
            "retention": {
              "expire_after": "14d",
              "min_count": 10,
              "max_count": 100
            }
          }
        status_code: 200
        body_format: json
      tags: elastic_search
