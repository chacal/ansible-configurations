---
#
# Playbook that sets up Prometheus and Grafana on monitor.chacal.fi
#
- hosts: monitor.chacal.fi
  remote_user: jihartik
  become: true

  vars_files:
    - secrets.yml

  vars:
    - aws_cli_user: root
    - aws_access_key_id: "{{ chacal.aws.home_infra_certbot.access_key }}"
    - aws_secret_access_key: "{{ chacal.aws.home_infra_certbot.secret_key }}"

  handlers:
    - name: Restart Prometheus
      docker_compose: project_src=/srv/monitoring-compose services=prometheus state=present restarted=true
    - name: Restart HAProxy
      docker_compose: project_src=/srv/monitoring-compose services=haproxy state=present restarted=true
    - name: Restart Grafana
      docker_compose: project_src=/srv/monitoring-compose services=grafana state=present restarted=true
    - name: Restart ElastAlert
      service: name=elastalert state=restarted

  roles:
    - role: filebeat
      filebeat_elasticsearch_hosts:
        - elastic.chacal.fi
    - role: debian_common
      unattended_upgrades_origins: '"o=elastic";"o=Docker";'
    - role: prometheus_node_exporter
    - role: self_monitoring
    - role: ouroboros
      ouroboros_notifier: "sendgrid://{{ chacal.sendgrid.ouroboros }}:root@{{ inventory_hostname }}/{{ chacal.ouroboros.email }}"
    - role: duplicacy
      duplicacy_filters: |
        +srv/
        +srv/prometheus/*
        -*
      duplicacy_backup_hours: "2,14"
      duplicacy_encryption_key: "{{ chacal.monitor.duplicacy.encryption_key }}"
      duplicacy_environment:
        DUPLICACY_B2_ID: "{{ chacal.monitor.duplicacy.b2_id }}"
        DUPLICACY_B2_KEY: "{{ chacal.monitor.duplicacy.b2_key }}"

  tasks:

    - name: Create data directories
      file:
        path: "{{ item }}"
        state: directory
        owner: nobody
        group: nogroup
      loop:
        - /srv/prometheus
        - /srv/prometheus/targets
        - /srv/prometheus/secure_targets
        - /srv/grafana
        - /srv/grafana/provisioning
        - /srv/grafana/provisioning/datasources
        - /srv/grafana/provisioning/dashboards
        - /srv/grafana/provisioning/notifiers
        - /srv/haproxy
      tags:
        - prometheus
        - grafana

    - name: Create letsencrypt certificate
      include_role:
        name: certbot-dns-route53
      vars:
        certbot_email: "{{ chacal.certbot.email }}"
        certbot_deploy_hook: |
          #!/bin/bash
          echo "Updating haproxy certificates with certbot deploy-hook.."
          cat /etc/letsencrypt/live/monitor.chacal.fi/fullchain.pem /etc/letsencrypt/live/monitor.chacal.fi/privkey.pem > \
          /srv/haproxy/certificate.pem
          docker kill -s HUP monitoring-compose_haproxy_1 || true
          echo "Certificate updated"

    - name: Create Prometheus configuration
      copy:
        dest: /srv/prometheus/prometheus.yml
        content: |
          global:
            scrape_interval:     15s
            evaluation_interval: 15s

          rule_files:
            - custom_rules.yml

          scrape_configs:
            - job_name: prometheus-servers
              static_configs:
                - targets:
                  - localhost:9090
              metrics_path: /prometheus/metrics

            - job_name: nodes
              file_sd_configs:
                - files:
                   - /prometheus/targets/*.yml
                  refresh_interval: 15s

            - job_name: secure-nodes
              scheme: https
              file_sd_configs:
                - files:
                   - /prometheus/secure_targets/*.yml
                  refresh_interval: 15s

            - job_name: authenticated-nodes
              scheme: https
              metrics_path: /node-metrics/metrics
              basic_auth:
                username: "{{ chacal.prometheus.basic_auth_username }}"
                password: "{{ chacal.prometheus.basic_auth_password }}"
              static_configs:
                - targets:
                  - ha.chacal.fi:443
      notify: Restart Prometheus
      tags: prometheus

    - name: Create Prometheus custom rules
      copy:
        dest: /srv/prometheus/custom_rules.yml
        content: |
          groups:
            - name: custom rules
              rules:
              - record: custom_cpu_count
                expr: count(node_cpu_seconds_total{mode="idle"}) without (cpu, mode)
              - record: custom_cpu_usage
                expr: avg by (instance, mode) (irate(node_cpu_seconds_total[1m]))
      notify: Restart Prometheus
      tags: prometheus

    - name: Create HAProxy configuration
      copy:
        dest: /srv/haproxy/haproxy.cfg
        content: |
          global
              maxconn 100
              ssl-default-bind-ciphers  ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
              tune.ssl.default-dh-param 2048

          defaults
              mode http
              timeout connect 5s
              timeout client 10s
              timeout server 30s
              stats enable
              stats uri /stats
              stats realm Haproxy\ Statistics
              stats auth {{ chacal.monitor.basic_auth.username }}:{{ chacal.monitor.basic_auth.password }}

          userlist admins
              user {{ chacal.monitor.basic_auth.username }} insecure-password {{ chacal.monitor.basic_auth.password }}

          frontend http-in
              bind *:443 ssl crt /usr/local/etc/haproxy/certificate.pem ssl-min-ver TLSv1.2
              default_backend grafana

              acl is_prometheus path_beg -i /prometheus
              use_backend prometheus if is_prometheus

          backend grafana
              server grafana1 grafana:3000

          backend prometheus
              acl valid_admin_user http_auth(admins)
              http-request auth realm Prometheus if !valid_admin_user
              server prometheus1 prometheus:9090
      notify: Restart HAProxy
      tags: haproxy

    - name: Provision Grafana Prometheus & Elasticsearch data source
      copy:
        dest: /srv/grafana/provisioning/datasources/datasource.yaml
        content: |
          apiVersion: 1

          datasources:
          - name: Prometheus
            id: 1
            orgId: 1
            type: prometheus
            access: proxy
            url: http://prometheus:9090/prometheus
            isDefault: 1
          - name: Elasticsearch
            id: 2
            orgId: 1
            type: elasticsearch
            access: proxy
            url: http://elastic.chacal.fi:9200
            database: "filebeat-*"
            jsonData:
              timeField: "@timestamp"
              esVersion: 70
              logMessageField: message
              logLevelField: fields.level
      notify: Restart Grafana
      tags: grafana

    - name: Provision Grafana dashboard provider
      copy:
        dest: /srv/grafana/provisioning/dashboards/dashboards.yaml
        content: |
          apiVersion: 1

          providers:
          - name: 'Dashboard provider'
            orgId: 1
            folder: 'Provisioned'
            type: file
            editable: true
            updateIntervalSeconds: 10
            allowUiUpdates: false
            options:
              path: /var/lib/grafana/dashboards
      notify: Restart Grafana
      tags: grafana

    - name: Provision Grafana dashboards
      copy:
        src: "{{ item }}"
        dest: /srv/grafana/dashboards/
      loop:
        - ./conf/monitor.chacal.fi/servers_dashboard.json
        - ./conf/monitor.chacal.fi/clickhouse_dashboard.json
        - ./conf/monitor.chacal.fi/logs_dashboard.json
        - ./conf/monitor.chacal.fi/all_logs_dashboard.json
      notify: Restart Grafana
      tags: grafana

    - name: Provision Grafana alert notification channels
      copy:
        dest: /srv/grafana/provisioning/notifiers/notifiers.yaml
        content: |
          notifiers:
            - name: "Elytys Slack"
              type: slack
              uid: elytys-slack
              org_id: 1
              is_default: true
              send_reminder: true
              frequency: 6h
              disable_resolve_message: false
              settings:
                url: {{ chacal.monitor.grafana.slack_hook }}
                username: Grafana Monitoring
                uploadImage: true
      notify: Restart Grafana
      tags: grafana

    - name: Create docker-compose service
      include_role:
        name: docker-compose
      vars:
        docker_regular_user: "{{ ansible_user }}"
        docker_compose_name: "monitoring-compose"
        docker_compose_file: |
          version: '2'
          services:
            prometheus:
              image: "prom/prometheus"
              command: |
                --config.file=/prometheus/prometheus.yml
                --web.external-url=http://{{ inventory_hostname }}/prometheus
                --web.enable-admin-api
                --storage.tsdb.retention.time 10y
              volumes:
                - "/srv/prometheus:/prometheus"
              restart: always

            grafana:
              image: "grafana/grafana"
              environment:
                - GF_SERVER_DOMAIN={{ inventory_hostname }}
                - GF_SECURITY_ADMIN_PASSWORD={{ chacal.monitor.grafana.password }}
                - GF_SMTP_ENABLED=true
                - GF_SMTP_HOST=smtp.sendgrid.net:587
                - GF_SMTP_USER=apikey
                - GF_SMTP_PASSWORD={{ chacal.sendgrid.monitor }}
                - GF_SMTP_FROM_ADDRESS=grafana@{{ inventory_hostname }}
                - GF_SMTP_FROM_NAME='Grafana - monitor.chacal.fi'
              volumes:
                - "/srv/grafana:/var/lib/grafana"
                - "/srv/grafana/provisioning:/etc/grafana/provisioning"
                - "/srv/grafana/dashboards:/var/lib/grafana/dashboards"
              user: "nobody"
              restart: always

            haproxy:
              image: "haproxy"
              ports:
                - "443:443"
              volumes:
                - "/srv/haproxy:/usr/local/etc/haproxy:ro"
              restart: always

    - name: Create elastalert user
      user: name=elastalert system=yes
      tags: elastalert

    - name: Create ElastAlert data directories
      file:
        path: "{{ item }}"
        state: directory
        owner: elastalert
        group: elastalert
      loop:
        - /srv/elastalert
        - /srv/elastalert/rules
      tags: elastalert

    - name: Create ElastAlert config.yaml
      copy:
        dest: /srv/elastalert/config.yaml
        content: |
          es_host: elastic.chacal.fi
          es_port: 9200
          rules_folder: /srv/elastalert/rules
          run_every:
            minutes: 2
          buffer_time:
            minutes: 5
          writeback_index: elastalert_status
          alert_time_limit:
            days: 3
          alert_text: |-
            LogTrail: <https://elastic.chacal.fi:5601/app/logtrail#/?h={0}&t={1}&i=filebeat-*&_g=()|{0}>
          alert_text_args:
            - host.name
            - "@timestamp"
          slack_webhook_url: {{ chacal.monitor.elastalert.slack_hook }}
          slack_username_override: ElastAlert
        owner: elastalert
        group: elastalert
      notify: Restart ElastAlert
      tags: elastalert

    - name: Add ElastAlert log output spiking rule
      copy:
        dest: /srv/elastalert/rules/log_amount_spike_per_host.yaml
        content: |
          name: Increased log output
          type: spike
          spike_type: "up"
          index: filebeat-*

          threshold_cur: 40
          spike_height: 5
          alert_on_new_data: true

          timeframe:
            hours: 1
          scan_entire_timeframe: true

          doc_type: _doc
          use_terms_query: true
          query_key: host.name

          alert:
            - slack
      tags: elastalert

    - name: Install ElastAlert
      pip:
        name: "{{ item }}"
        state: latest
        executable: pip3
      loop:
        - PyYAML
        - elastalert
      tags: elastalert

    - name: Check ElastAlert index
      uri:
        url: http://elastic.chacal.fi:9200/elastalert_status
        status_code: [200, 404]
      register: elastalert_index
      tags: elastalert

    - name: Create ElastAlert indices
      command:
        cmd: /usr/local/bin/elastalert-create-index --config /srv/elastalert/config.yaml
      when: elastalert_index.status == 404
      tags: elastalert

    - name: Install ElastAlert systemd unit file
      copy:
        dest: /etc/systemd/system/elastalert.service
        content: |
          [Unit]
          Description=ElastAlert

          [Service]
          User=elastalert
          Group=elastalert
          Type=exec
          ExecStart=/usr/local/bin/elastalert --config /srv/elastalert/config.yaml
          Restart=always
          RestartSec=5

          [Install]
          WantedBy=multi-user.target
      notify: Restart ElastAlert
      tags: elastalert

    - name: Enable and start ElastAlert
      systemd:
        name: elastalert
        daemon_reload: yes
        enabled: yes
        state: started
      tags: elastalert
