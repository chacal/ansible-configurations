---
- hosts: all
  become: true
  remote_user: root
  gather_facts: yes

  vars_files:
    - secrets.yml

  pre_tasks:
    - name: 'Install python2'
      raw: apt-get -y install python-simplejson python-passlib

  roles:
    - name: sendgrid_with_dma
      sendgrid_api_key: "{{ chacal.sendgrid.netserver }}"

  tasks:

  #
  #  Install required packages
  #
    - name: Install/update dependencies
      apt:
        state: latest
        update_cache: yes
        pkg:
          - nginx
          - python-boto
          - ufw
          - sshguard
          - certbot
          - sudo
          - iftop
          - dma
          - duply
          - duplicity
          - prometheus-node-exporter

    - name: Enable automatic upgrades
      include_role:
        name: unattended_upgrades
      vars:
        unattended_upgrades_email: "{{ chacal.ha.unattended_upgrades.email }}"
        unattended_upgrades_origins: '"n=${distro_codename}"; "n=buster-updates";'

  #
  #  Run 'certbot certonly --standalone -d ha.chacal.fi' to get certificates
  #

  #
  #  Install Zerotier private networking
  #
    - name: Install Zerotier
      include_role:
        name: zerotier
      vars:
        zerotier_network_id: "{{ chacal.zerotier.network_id }}"
        zerotier_moon_id: "{{ chacal.zerotier.moon_id }}"

    - name: Set static private address
      copy:
        dest: /etc/network/interfaces.d/zerotier.cfg
        content: |
          iface ztbpacrs4c inet static
          address 10.90.70.19
          netmask 255.255.255.0
          gateway 10.90.70.1
          dns-nameservers 10.90.70.2 1.1.1.1 8.8.8.8

  #
  #  Configure Nginx
  #
    - name: Remove default Nginx site
      file: path=/etc/nginx/sites-enabled/default state=absent
      register: nginx_default_site
      tags: nginx

    - name: Create DH params
      command:
        cmd: openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048
        creates: /etc/ssl/certs/dhparam.pem

    - name: Add custom Nginx SSL snippet
      copy: src=./conf/nginx_ssl_snippet.conf dest=/etc/nginx/snippets/ssl.conf
      register: nginx_custom_ssl_conf
      tags: nginx

    - name: Add custom Nginx configuration
      copy: src=./conf/ha.chacal.fi/nginx.conf dest=/etc/nginx/conf.d/ha.chacal.fi_nginx.conf
      register: nginx_custom_site
      tags: nginx

    - name: Set credentials for basic auth access
      htpasswd:
        path: /etc/nginx/passwdfile
        name: "{{ chacal.ha.basic_auth.prometheus_metrics.username }}"
        password: "{{ chacal.ha.basic_auth.prometheus_metrics.password }}"
        owner: root
        group: www-data
        mode: 0640
      tags: nginx

    - name: Enable & start Nginx
      systemd: name=nginx state=restarted enabled=yes daemon_reload=yes
      when: nginx_default_site.changed or nginx_custom_ssl_conf.changed or nginx_custom_site.changed
      tags: nginx

    - name: Reload Nginx periodically to get new SSL certs in use (certbot might have updated them)
      cron: name="Reload nginx" minute="0" hour="2" job="systemctl reload nginx"
      tags: nginx

  #
  #  Configure duply backups
  #
    - name: Create conf dir for duply backups
      file: path=/root/.duply/ha.chacal.fi state=directory

    - name: Setup duply backup configuration
      template: src=./conf/ha.chacal.fi/duply_conf.j2 dest=/root/.duply/ha.chacal.fi/conf

    - name: Setup duply backup excludes
      copy: src=./conf/ha.chacal.fi/duply_exclude dest=/root/.duply/ha.chacal.fi/exclude

    - name: Setup Dupply S3 credentials
      copy:
        dest: /root/.duply/ha.chacal.fi/aws_credentials
        mode: 0600
        content: |
          export AWS_ACCESS_KEY_ID='{{ chacal.aws.ha_backup.access_key }}'
          export AWS_SECRET_ACCESS_KEY='{{ chacal.aws.ha_backup.secret_key }}'

    - name: Backup periodically
      cron:
        name: "Duply backup"
        minute: "0"
        hour: "*/12"
        job: ". /root/.duply/ha.chacal.fi/aws_credentials; duply ha.chacal.fi backup 2>&1 | /usr/bin/logger -t duply-ha"

    - name: Purge too old backups
      cron:
        name: "Purge old duply backups"
        minute: "0"
        hour: "13"
        weekday: "mon"
        job: ". /root/.duply/ha.chacal.fi/aws_credentials; duply ha.chacal.fi purge 6M --force 2>&1 | /usr/bin/logger -t duply-ha"


  #
  #  Configure firewall
  #
    - name: Allow SSH traffic in
      ufw: rule=allow proto=tcp to_port=22 from_ip=80.220.162.156

    - name: Allow SSH traffic in
      ufw: rule=allow proto=tcp to_port=22 from_ip=10.90.70.0/24

    - name: Allow HTTP traffic in
      ufw: rule=allow name='WWW'

    - name: Allow HTTPS traffic in
      ufw: rule=allow name='WWW Secure'

    - name: Allow Zerotier traffic in
      ufw: rule=allow proto=udp to_port=9993

    - name: Enable firewall & disable logging
      ufw: state=enabled policy=deny logging=off



  #
  #  Install PostgreSQL
  #
    - name: Create PostgreSQL data directory
      file: path=/srv/postgres state=directory

    - name: Install PostgreSQL
      include_role:
        name: docker-app
      vars:
        docker_regular_user: "root"
        docker_app_name: "postgres"
        docker_app_container_name: "postgres:12"
        docker_app_extra_params: "-v /srv/postgres:/var/lib/postgresql/data"
        docker_app_ports:
          - "127.0.0.1:5432:5432"
        docker_app_env:
          - "POSTGRES_USER=ha"
          - "POSTGRES_DB=ha"
          - "POSTGRES_PASSWORD={{ chacal.ha.postgres.password }}"



  #
  #  Install Home Assistant
  #
    - name: Create Home Assistant data directory
      file: path=/srv/home-assistant state=directory

    - name: Provision HA secrets
      template: src=./conf/ha.chacal.fi/secrets.yaml.j2 dest=/srv/home-assistant/secrets.yaml mode=0600
      tags: ha

    - name: Copy Home Assistant configuration file
      copy: src=./conf/ha.chacal.fi/ha-configuration.yaml dest=/srv/home-assistant/configuration.yaml
      tags: ha

    - name: Copy Home Assistant automations file
      copy: src=./conf/ha.chacal.fi/ha-automations.yaml dest=/srv/home-assistant/automations.yaml
      tags: ha

    - name: Copy Home Assistant scenes file
      copy: src=./conf/ha.chacal.fi/ha-scenes.yaml dest=/srv/home-assistant/scenes.yaml
      tags: ha

    - name: Create empty group and script configs
      file: path=/srv/home-assistant/{{ item }} state=touch
      loop:
        - groups.yaml
        - scripts.yaml
      tags: ha

    - name: Create Home Assistant custom_components directory
      file: path=/srv/home-assistant/custom_components state=directory
      tags: ha

    - name: Install Mount Kelvin integration
      git:
        repo: https://github.com/chacal/ha_mount_kelvin_integration.git
        dest: /srv/home-assistant/custom_components/mount_kelvin
        force: yes
        version: master
      register: mount_kelvin_git_pull
      tags: ha

    - name: Install Home Assistant
      include_role:
        name: docker-app
      vars:
        docker_regular_user: "root"
        docker_app_name: "home-assistant"
        docker_app_container_name: "homeassistant/home-assistant:stable"
        docker_app_extra_params: "--net=host -v /srv/home-assistant:/config --init"
        docker_app_env:
          - TZ=Europe/Helsinki

    - name: Restart Home Assistant
      service: name=home-assistant state=restarted enabled=yes
      when: mount_kelvin_git_pull.changed


    #
    #  Install Ouroboros
    #
    - name: Install Ouroboros
      include_role:
        name: docker-app
      vars:
        docker_regular_user: "root"
        docker_app_name: "ouroboros"
        docker_app_container_name: "pyouroboros/ouroboros"
        docker_app_extra_params: "-v /var/run/docker.sock:/var/run/docker.sock"
        docker_app_env:
          - "NOTIFIERS=sendgrid://{{ chacal.sendgrid.netserver }}:root@ha.chacal.fi/jouni.hartikainen@iki.fi"
          - TZ=Europe/Helsinki
          - SELF_UPDATE=true
          - CLEANUP=true

